devtools::install_github("bnosac/image", subdir = "image.darknet", build_vignettes = TRUE)
library(image.darknet)
image_darknet_detect(file = "img1.png", object = yolo_tiny_voc, threshold = 0.19)
yolo_tiny_voc <- image_darknet_model(type = "detect",
model = "tiny-yolo-voc.cfg",
weights = system.file(package="image.darknet", "models", "tiny-yolo-voc.weights"),
labels = system.file(package="image.darknet”, "include", "darknet"", "data", "voc.names"))
labels = system.file(package="image.darknet”, "include", "darknet", "data", "voc.names"))
yolo_tiny_voc <- image_darknet_model(type = 'detect',
model = "tiny-yolo-voc.cfg",
weights = system.file(package="image.darknet", "models", "tiny-yolo-voc.weights"),
labels = system.file(package="image.darknet", "include", "darknet", "data", "voc.names"))
image_darknet_detect(file = "img1.png", object = yolo_tiny_voc, threshold = 0.19)
image_darknet_detect(file = "img1.PNG", object = yolo_tiny_voc, threshold = 0.19)
image_darknet_detect(file = "../img1.PNG", object = yolo_tiny_voc, threshold = 0.19)
image_darknet_detect(file = "../img1.png", object = yolo_tiny_voc, threshold = 0.19)
image_darknet_detect(file = "./img1.png", object = yolo_tiny_voc, threshold = 0.19)
x <- image_darknet_detect(file = "./img1.png", object = yolo_tiny_voc, threshold = 0.19)
x
x <- image_darknet_detect(file = "./delermando4.png", object = yolo_tiny_voc, threshold = 0.19)
x <- image_darknet_detect(file = "./delermando4.jpg", object = yolo_tiny_voc, threshold = 0.19)
x <- image_darknet_detect(file = "./img1.jpg", object = yolo_tiny_voc, threshold = 0.19)
x <- image_darknet_detect(file = "./img1.png", object = yolo_tiny_voc, threshold = 0.19)
require(mxnet)
require(imager)
model = mx.model.load("Inception/Inception_BN", iteration=39)
mean.img = as.array(mx.nd.load("Inception/mean_224.nd")[["mean_img"]])
im <- load.image(system.file("delermando.jpg", package="imager"))
im <- load.image(system.file("./delermando.jpg", package="imager"))
im <- load.image(system.file("delermando.jpg", package="imager"))
preproc.image <- function(im, mean.image) {
# crop the image
shape <- dim(im)
short.edge <- min(shape[1:2])
xx <- floor((shape[1] - short.edge) / 2)
yy <- floor((shape[2] - short.edge) / 2)
cropped <- crop.borders(im, xx, yy)
# resize to 224 x 224, needed by input of the model.
resized <- resize(cropped, 224, 224)
# convert to array (x, y, channel)
arr <- as.array(resized) * 255
dim(arr) <- c(224, 224, 3)
# subtract the mean
normed <- arr - mean.img
# Reshape to format needed by mxnet (width, height, channel, num)
dim(normed) <- c(224, 224, 3, 1)
return(normed)
}
im <- load.image("delermando.jpg")
preproc.image <- function(im, mean.image) {
# crop the image
shape <- dim(im)
short.edge <- min(shape[1:2])
xx <- floor((shape[1] - short.edge) / 2)
yy <- floor((shape[2] - short.edge) / 2)
cropped <- crop.borders(im, xx, yy)
# resize to 224 x 224, needed by input of the model.
resized <- resize(cropped, 224, 224)
# convert to array (x, y, channel)
arr <- as.array(resized) * 255
dim(arr) <- c(224, 224, 3)
# subtract the mean
normed <- arr - mean.img
# Reshape to format needed by mxnet (width, height, channel, num)
dim(normed) <- c(224, 224, 3, 1)
return(normed)
}
normed <- preproc.image(im, mean.img)
prob <- predict(model, X=normed)
max.idx <- max.col(t(prob))
max.idx
synsets <- readLines("Inception/synset.txt")
print(paste("Predicted Top-class:", synsets[[max.idx]]))
im <- load.image("delermando4.jpg")
normed <- preproc.image(im, mean.img)
prob <- predict(model, X=normed)
max.idx <- max.col(t(prob))
max.idx
synsets <- readLines("Inception/synset.txt")
print(paste("Predicted Top-class:", synsets[[max.idx]]))
